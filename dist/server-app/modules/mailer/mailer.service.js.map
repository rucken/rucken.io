{"version":3,"file":"mailer.service.js","sourceRoot":"","sources":["../../../../server/modules/mailer/mailer.service.ts"],"names":[],"mappings":";;;AACA,2CAAoD;AACpD,2CAA2E;AAE3E,iFAAqE;AAKrE,MAAM,GAAG,GAAG,OAAO,CAAC,YAAY,CAAC,CAAC;AAKlC,IAAa,aAAa,GAA1B,MAAa,aAAa;IAGxB,YAAqD,aAA4B;QAA5B,kBAAa,GAAb,aAAa,CAAe;QAC/E,IAAI,CAAC,aAAa,CAAC,SAAS,IAAI,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC,MAAM,IAAI,CAAC,EAAE;YAChF,MAAM,IAAI,KAAK,CAAC,kHAAkH,CAAC,CAAC;SACrI;QAGD,IAAI,CAAC,WAAW,GAAG,4BAAe,CAAC,IAAI,CAAC,aAAa,CAAC,SAAS,EAAE,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;QAG9F,MAAM,eAAe,GAAoB,GAAG,CAAC,IAAI,CAAC,aAAa,EAAE,kBAAkB,CAAC,CAAC;QAErF,IAAI,eAAe,EAAE;YACnB,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,SAAS,EAAE,CAAC,IAAI,EAAE,QAAQ,EAAE,EAAE;gBACjD,IAAI,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE;oBAClB,OAAO,QAAQ,EAAE,CAAC;iBACnB;gBAED,OAAO,eAAe,CAAC,OAAO,CAAC,IAAI,EAAE,QAAQ,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC;YACrE,CAAC,CAAC,CAAC;SACJ;IACH,CAAC;IAEY,QAAQ,CAAC,eAAiC;;YACrD,OAAO,MAAM,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,eAAe,CAAC,CAAC;QAC1D,CAAC;KAAA;CACF,CAAA;AA5BY,aAAa;IADzB,mBAAU,EAAE;IAIE,mBAAA,eAAM,CAAC,wCAAc,CAAC,CAAA;;GAHxB,aAAa,CA4BzB;AA5BY,sCAAa","sourcesContent":["/** Dependencies **/\nimport { Inject, Injectable } from '@nestjs/common';\nimport { createTransport, SentMessageInfo, Transporter } from 'nodemailer';\n/** Constants **/\nimport { MAILER_OPTIONS } from './constants/mailer-options.constant';\n/** Interfaces **/\nimport { MailerOptions } from './interfaces/mailer-options.interface';\nimport { ISendMailOptions } from './interfaces/send-mail-options.interface';\nimport { TemplateAdapter } from './interfaces/template-adapter.interface';\nconst get = require('lodash.get');\n\n\n\n@Injectable()\nexport class MailerService {\n  private transporter: Transporter;\n\n  constructor(@Inject(MAILER_OPTIONS) private readonly mailerOptions: MailerOptions) {\n    if (!mailerOptions.transport || Object.keys(mailerOptions.transport).length <= 0) {\n      throw new Error('Make sure to provide a nodemailer transport configuration object, connection url or a transport plugin instance.');\n    }\n\n    /** Transporter setup **/\n    this.transporter = createTransport(this.mailerOptions.transport, this.mailerOptions.defaults);\n\n    /** Adapter setup **/\n    const templateAdapter: TemplateAdapter = get(this.mailerOptions, 'template.adapter');\n\n    if (templateAdapter) {\n      this.transporter.use('compile', (mail, callback) => {\n        if (mail.data.html) {\n          return callback();\n        }\n\n        return templateAdapter.compile(mail, callback, this.mailerOptions);\n      });\n    }\n  }\n\n  public async sendMail(sendMailOptions: ISendMailOptions): Promise<SentMessageInfo> {\n    return await this.transporter.sendMail(sendMailOptions);\n  }\n}\n"]}